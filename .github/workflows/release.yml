name: Build and Release Telekomanda

on:
  workflow_dispatch: # Allows manual triggering
  # push: # Example: Uncomment and configure if you want to trigger on pushes
  #   branches: [ main ]
  # release: # Example: Uncomment if you want to trigger when a GitHub Release is published/created
  #   types: [ published ]

jobs:
  build-linux:
    name: Build Linux (DEB)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use latest stable version

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v4 # Use latest stable version
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle # Cache Gradle dependencies

      - name: Make gradlew executable
        run: chmod +x ./gradlew # Or path/to/your/gradlew if in subdirectory
        working-directory: Telekomanda # If your gradlew is in eltonkola

      - name: Build Deb package
        run: ./gradlew :composeApp:packageDeb # Assuming composeApp is your module
        working-directory: Telekomanda # If your gradlew is in eltonkola

      - name: Upload DEB Artifact
        uses: actions/upload-artifact@v4 # Use latest stable version
        with:
          name: app-deb # Artifact name for download later
          path: Telekomanda/composeApp/build/compose/binaries/main/deb/Telekomanda-1.0.0_amd64.deb # Verify this exact filename

  build-windows:
    name: Build Windows (MSI)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle

      # No chmod needed for gradlew.bat on Windows

      - name: Build Msi package
        run: ./gradlew.bat :composeApp:packageMsi
        working-directory: Telekomanda # If your gradlew is in eltonkola
        shell: cmd # Or powershell, ensure gradlew.bat is used correctly

      - name: Upload MSI Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-msi
          path: Telekomanda\composeApp\build\compose\binaries\main\msi\Telekomanda-1.0.0.msi # Verify this exact filename

  build-macos:
    name: Build macOS (DMG)
    runs-on: macos-latest # Consider macos-13 or macos-12 if latest has issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: Telekomanda # If your gradlew is in eltonkola

      - name: Build Dmg package
        run: ./gradlew :composeApp:packageDmg
        working-directory: Telekomanda # If your gradlew is in eltonkola

      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-dmg
          path: Telekomanda/composeApp/build/compose/binaries/main/dmg/Telekomanda-1.0.0.dmg # Verify this exact filename

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    # Optional: Add permissions if your GITHUB_TOKEN needs more scope (usually not needed for create-release and upload-release-asset)
    # permissions:
    #   contents: write # To create releases and upload assets
    steps:
      - name: Download DEB Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-deb
          path: release-assets/

      - name: Download MSI Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-msi
          path: release-assets/

      - name: Download DMG Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-dmg
          path: release-assets/

      - name: List Downloaded Files
        run: ls -R release-assets/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0 # TODO: Make this dynamic (e.g., from input, or git tag)
          release_name: Telekomanda v1.0.0 # TODO: Make this dynamic
          body: |
            Release of Telekomanda version 1.0.0.
            Includes builds for Linux (DEB), Windows (MSI), and macOS (DMG).
          draft: false      # Set to true if you want to manually publish later
          prerelease: false # Set to true if this is a pre-release

      - name: Upload Release Asset - DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/Telekomanda-1.0.0_amd64.deb  # VERIFY THIS FILENAME (was Telekomanda-1.0.0-1_amd64.deb before, ensure consistency)
          asset_name: Telekomanda-1.0.0-linux-amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Release Asset - MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/Telekomanda-1.0.0.msi # VERIFY THIS FILENAME
          asset_name: Telekomanda-1.0.0-windows-x64.msi
          asset_content_type: application/x-msi

      - name: Upload Release Asset - DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/Telekomanda-1.0.0.dmg # VERIFY THIS FILENAME
          asset_name: Telekomanda-1.0.0-macos.dmg
          asset_content_type: application/x-apple-diskimage
